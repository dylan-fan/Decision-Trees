#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include "dec.oh"
#include "dec.h"
#include "../lib/absentminded-crypto-kit/src/obig.oh"

char[][] matrix;
/*
typedef struct attrib{
    int count;
    char* name;
};

typedef struct collect_attrib{
    attrib *attribs;
};

char[][] matrix;

typedef struct decision{
    int rows;
    int cols;
    double entropy;
    //char[][] matrix;
    collect_attrib *colattrs;
};

typedef struct tree{
    sharp root;
    int depth;
};

typedef struct sharp
{
    decision dec;
    sharp* pointers;
};
int searchAttrib(string str)
{
    for(int i=0;i<attribs.size();i++){
        if(attribs[i].name.compare(str)==0) return i;
    }
    return -1;
}
void processAttrib(string str)
{
    int pos=searchAttrib(str);
    if(pos==-1){
        attribs.resize(((int) attribs.size())+1);
        attribs[((int)attribs.size())-1].name=name;
        attribs[((int)attribs.size())-1].count++;
    }
    else{
        attribs[pos].count++;
    }
}

void printDec(decison d)
{
    for(int i=0;i<d.matrix.size();i++){
        for(j=0;j<d.matrix.size();j++){
            printf(matrix[i][j],"|");
        }
        printf("\n");
    }
}

decision withdrawAttribute(int col, char* name, int count)
{
    decision newdec(colattrs.size()-1);
    newdec.matrix.resize(count);
    newdec.rows=count;
    for(int i=0;i<newdec.rows;i++){
        newdec.matrix[i].resize(newdec.colattrs.size());
    }
    newdec.cols=newdec.colattrs.size();
    
    int tempi;
    for(int i=0;i<rows;i++){
        int oldj=0;
        if(matrix[i][col]=name){
            for(int j=0;j<newdec.cols;j++){
                if(j==col) oldj++;
                newdec.matrix[tempi][j]=matrix[i][oldj];
                oldj++;
            }
            tempi++;
        }
    }
    return newdec;
}

void mountfile(char* file)
{
    matrix.resize(rows);
    for(int i=0;i<rows;i++){
        matrix[i].resize(columns);
    }
    rows=ROWS;
    cols=COLUMNS;
    FILE *fp;
    fp=fopen("adult.txt","r");
    for(int i=0;i<ROWS;i++){
        char* line;
        getline(fp,line);
        
        int x;
        int y=line.find(',',x);
        
        for (int j=0;j<COLUMNS;j++){
            matrix[i][j]=line.substr(x,y-x);
            x=y+1;
            y=line.find(',',x);
        }
    }
}

void accountProb()
{
    for(int i=0;i<cols;i++){
        for(j=0;j<rows;j++){
            collect_attrib[i].processAttrib(matrix[j][i]);
        }
    }
}

void calculateEntropy()
{
    accountProb();
    double Entropy=0;
    for(int i=0;i<collect_attrib[collect_attrib.size()-1].attribs.size();i++){
        attrib *tempAttrib=&collect_attrib[collect_attrib.size()-1].attribs[i];
        double quotient = (double)(tempAttrib->count)/matrix.size();
        Entropy += - oblivMul(quotient, (log2(quotient)), );
    }
    entropy=Entropy;
}

double calculateGainColumn(int col)
{
    double gain = entropy;
    for(int i=0;i<collect_attrib[col].attribs.size();i++){
        decision dec(collect_attrib.size());
        attrib *tempAttrib=&collect_attrib[col].attribs[i];
        matrix.resize(tempAttrib->count); //
        dec.rows=tempAttrib->count;
        for(j=0;j<tempAttrib->count;j++){
            dec.matrix[j].resize(cols);
        }
        dec.cols=cols;
        int x=0;
        for(int j=0;j<rows;j++){
            if(matrix[j][col]=tempAttrib->name){
                dec.matrix[x++]=matrix[j];
            }
        }
        dec.calculateEntropy();
        gain-=((double)tempAttrib->count/matrix.size())*(dec.entropy);
    }
    return gain;
}

void tr(int rows, int cols)
{
    sharp rootfile;
    //rootfile.dec.mountfile(file);
    //root=constructor_sharp();
    root=rootfile.id3();
    depth=0;
}

sharp* id3()
{
    if(dec.cols==1){
        printf(dec.matrix[0][0],"\n");
        return NULL;
    }
    dec.calculateEntropy();
    int colpartial=0;
    double gainpartial=0;
    for(int i=0;i<(dec.matrix[0].size()-1);i++){
        double gain = dec.calculateGainColumn(i);
        if(gain > gainpartial){
            colpartial=i;
            gainpartial=gain;
        }
    }
    
    collect_attrib* collect=&dec.collect_attrib[colpartial];
    pointers.resize(collect->attribs.size());
    for(int i=0;i<pointers.size();i++){
        sharp sh;
        sh.dec=dec.withdrawAttribute(colpartial,collect->attribs[i].name,collect->attribs[i].count)
        pointers[i]=constructor_sharp();
        pointers[i]=sh.id3();
    }
    return sh;
}
*/

void oblivDec(void *args)
{

	ProtocolIO *dec = (ProtocolIO*)args;

	printf("beginning obig initiation...\n");
	int i=0; int j=0;

	obig oa;
	obig_init(&oa, 16);
	obig ob;
	obig_init(&ob, 16);
	obig oc;
	obig_init(&oc, 64);
	File *f1, *f2;
	printf("obig initiation successful.\n");
	byte buf[4096];
	size_t len = 0;
	char *n1 = feedOblivInt(dec->filename, 1);
	char *n2 = feedOblivInt(dec->filename, 2);
	//obliv int n3 = 0;
	f1= fopen(n1, "r");
	f2= fopen(n2, "r");
	while ((read = getline(&buf, &len, f1)) != -1) {
        char * line = strtok(strdup(buf), ",");
		while(line) {
			matrix[i][j]= strcpy(line);
   			line  = strtok(NULL, ",");
   			j++;
		}
		i++;
    }
    j=0;
    while ((read = getline(&buf, &len, f2)) != -1) {
        char * line = strtok(strdup(buf), ",");
        while(line) {
            matrix[i][j]= strcpy(line);
            line  = strtok(NULL, ",");
            j++;
        }
        i++;
    }
	printf("obliv feed successful\n");

	//obig_import_onative(&oa, n1);
	//obig_import_onative(&ob, n2);
	//obig_import_onative(&oc, n3);

	printf("obig import successful\n");

//	obig_mul(&oc, oa, ob);
	tr(rows, columns, filename);

	printf("oblivious decision tree successful\n");

	obliv int answer = obig_export_onative(oc);

	printf("obig export successful\n");

 	revealOblivInt(&mul->result, answer, 0);

	printf("Reveal successful %d\n", dec->result);

}
